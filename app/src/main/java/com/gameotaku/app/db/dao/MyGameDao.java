package com.gameotaku.app.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table MY_GAME.
 */
public class MyGameDao extends AbstractDao<MyGame, Long> {

    public static final String TABLENAME = "MY_GAME";

    public MyGameDao(DaoConfig config) {
        super(config);
    }

    ;


    public MyGameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'MY_GAME' (" + //
                "'LOCAL_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: local_id
                "'ITEM_ID' INTEGER NOT NULL ," + // 1: item_id
                "'TYPE' INTEGER NOT NULL ," + // 2: type
                "'PACKAGE_NAME' TEXT NOT NULL ," + // 3: package_name
                "'VERSION_NAME' TEXT," + // 4: version_name
                "'VERSION_CODE' INTEGER," + // 5: version_code
                "'PLAY_COUNT' INTEGER," + // 6: play_count
                "'MORE_COUNT' INTEGER," + // 7: more_count
                "'STATUS' INTEGER," + // 8: status
                "'LAST_PLAY_TIME' INTEGER," + // 9: last_play_time
                "'CREATE_TIME' INTEGER NOT NULL );"); // 10: create_time
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MY_GAME'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, MyGame entity) {
        stmt.clearBindings();

        Long local_id = entity.getLocal_id();
        if (local_id != null) {
            stmt.bindLong(1, local_id);
        }
        stmt.bindLong(2, entity.getItem_id());
        stmt.bindLong(3, entity.getType());
        stmt.bindString(4, entity.getPackage_name());

        String version_name = entity.getVersion_name();
        if (version_name != null) {
            stmt.bindString(5, version_name);
        }

        Integer version_code = entity.getVersion_code();
        if (version_code != null) {
            stmt.bindLong(6, version_code);
        }

        Integer play_count = entity.getPlay_count();
        if (play_count != null) {
            stmt.bindLong(7, play_count);
        }

        Integer more_count = entity.getMore_count();
        if (more_count != null) {
            stmt.bindLong(8, more_count);
        }

        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(9, status);
        }

        Long last_play_time = entity.getLast_play_time();
        if (last_play_time != null) {
            stmt.bindLong(10, last_play_time);
        }
        stmt.bindLong(11, entity.getCreate_time());
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public MyGame readEntity(Cursor cursor, int offset) {
        MyGame entity = new MyGame( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // local_id
                cursor.getLong(offset + 1), // item_id
                cursor.getInt(offset + 2), // type
                cursor.getString(offset + 3), // package_name
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // version_name
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // version_code
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // play_count
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // more_count
                cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // status
                cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // last_play_time
                cursor.getLong(offset + 10) // create_time
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, MyGame entity, int offset) {
        entity.setLocal_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem_id(cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setPackage_name(cursor.getString(offset + 3));
        entity.setVersion_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVersion_code(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPlay_count(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setMore_count(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setStatus(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLast_play_time(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setCreate_time(cursor.getLong(offset + 10));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(MyGame entity, long rowId) {
        entity.setLocal_id(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(MyGame entity) {
        if (entity != null) {
            return entity.getLocal_id();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity MyGame.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Local_id = new Property(0, Long.class, "local_id", true, "LOCAL_ID");
        public final static Property Item_id = new Property(1, long.class, "item_id", false, "ITEM_ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Package_name = new Property(3, String.class, "package_name", false, "PACKAGE_NAME");
        public final static Property Version_name = new Property(4, String.class, "version_name", false, "VERSION_NAME");
        public final static Property Version_code = new Property(5, Integer.class, "version_code", false, "VERSION_CODE");
        public final static Property Play_count = new Property(6, Integer.class, "play_count", false, "PLAY_COUNT");
        public final static Property More_count = new Property(7, Integer.class, "more_count", false, "MORE_COUNT");
        public final static Property Status = new Property(8, Integer.class, "status", false, "STATUS");
        public final static Property Last_play_time = new Property(9, Long.class, "last_play_time", false, "LAST_PLAY_TIME");
        public final static Property Create_time = new Property(10, long.class, "create_time", false, "CREATE_TIME");
    }

}

package com.gameotaku.app.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table DOWNLOAD_GAME.
 */
public class DownloadGameDao extends AbstractDao<DownloadGame, Long> {

    public static final String TABLENAME = "DOWNLOAD_GAME";

    public DownloadGameDao(DaoConfig config) {
        super(config);
    }

    ;


    public DownloadGameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'DOWNLOAD_GAME' (" + //
                "'DOWNLOAD_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: download_id
                "'ITEM_ID' INTEGER NOT NULL ," + // 1: item_id
                "'TYPE' INTEGER NOT NULL ," + // 2: type
                "'REQUEST_URL' TEXT," + // 3: request_url
                "'TEMP_NAME' TEXT," + // 4: temp_name
                "'APK_NAME' TEXT," + // 5: apk_name
                "'PROGRESS' INTEGER," + // 6: progress
                "'STATUS' INTEGER NOT NULL ," + // 7: status
                "'PACKAGE_NAME' TEXT NOT NULL ," + // 8: package_name
                "'TOTAL_SIZE' INTEGER);"); // 9: total_size
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DOWNLOAD_GAME'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, DownloadGame entity) {
        stmt.clearBindings();

        Long download_id = entity.getDownload_id();
        if (download_id != null) {
            stmt.bindLong(1, download_id);
        }
        stmt.bindLong(2, entity.getItem_id());
        stmt.bindLong(3, entity.getType());

        String request_url = entity.getRequest_url();
        if (request_url != null) {
            stmt.bindString(4, request_url);
        }

        String temp_name = entity.getTemp_name();
        if (temp_name != null) {
            stmt.bindString(5, temp_name);
        }

        String apk_name = entity.getApk_name();
        if (apk_name != null) {
            stmt.bindString(6, apk_name);
        }

        Integer progress = entity.getProgress();
        if (progress != null) {
            stmt.bindLong(7, progress);
        }
        stmt.bindLong(8, entity.getStatus());
        stmt.bindString(9, entity.getPackage_name());

        Long total_size = entity.getTotal_size();
        if (total_size != null) {
            stmt.bindLong(10, total_size);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public DownloadGame readEntity(Cursor cursor, int offset) {
        DownloadGame entity = new DownloadGame( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // download_id
                cursor.getLong(offset + 1), // item_id
                cursor.getInt(offset + 2), // type
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // request_url
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // temp_name
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // apk_name
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // progress
                cursor.getInt(offset + 7), // status
                cursor.getString(offset + 8), // package_name
                cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // total_size
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, DownloadGame entity, int offset) {
        entity.setDownload_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItem_id(cursor.getLong(offset + 1));
        entity.setType(cursor.getInt(offset + 2));
        entity.setRequest_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTemp_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setApk_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProgress(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
        entity.setPackage_name(cursor.getString(offset + 8));
        entity.setTotal_size(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(DownloadGame entity, long rowId) {
        entity.setDownload_id(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(DownloadGame entity) {
        if (entity != null) {
            return entity.getDownload_id();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity DownloadGame.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Download_id = new Property(0, Long.class, "download_id", true, "DOWNLOAD_ID");
        public final static Property Item_id = new Property(1, long.class, "item_id", false, "ITEM_ID");
        public final static Property Type = new Property(2, int.class, "type", false, "TYPE");
        public final static Property Request_url = new Property(3, String.class, "request_url", false, "REQUEST_URL");
        public final static Property Temp_name = new Property(4, String.class, "temp_name", false, "TEMP_NAME");
        public final static Property Apk_name = new Property(5, String.class, "apk_name", false, "APK_NAME");
        public final static Property Progress = new Property(6, Integer.class, "progress", false, "PROGRESS");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
        public final static Property Package_name = new Property(8, String.class, "package_name", false, "PACKAGE_NAME");
        public final static Property Total_size = new Property(9, Long.class, "total_size", false, "TOTAL_SIZE");
    }

}
